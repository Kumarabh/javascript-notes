https://dmitripavlutin.com/differences-between-arrow-and-regular-functions/#:~:text=The%20arrow%20function%20doesn't,value%20from%20the%20outer%20function.

Note:- // call, apply, bind method takes window object by default, if nothing is passed

// -------------------------------------------------------------------------   Normal function

 var x = 'John Doe';
 let y = 'James Smith';
 const z = 'Lisa Ray';

 (function() {
   console.log(this.x, this.y, this.z); 
 John Doe undefined undefined
 })()


// -------------------------------------------------------------------------  Method function

const organisation = {
  organisationId: 101,
  organisationName: 'Constantinople tech pvt ltd.',

  getOrgName: function() {
    return this.organisationId;
  }
}

const department = {
  organisationId: 'Dept101',
  departmentId: 201,
  departmentName: 'Computer Science & IT'
};


const result1 = organisation.getOrgName.call() //window.organisationId
console.log(result1) // undefined


const result2 = organisation.getOrgName.call(department) // department.organisationId
console.log(result2) // Dept101

const test = organisation.getOrgName;
const result3 = test(); // window.organisationId
console.log(result3); // undefined

// -------------------------------------------------------------------------  Constructor invokation
During a constructor invocation using new keyword this equals the newly created instance
// JavaScript creates a new object and sets this to the newly created object

function Organisation(orgId, orgName) {
  if(!new.target) throw Error('invalid invokation of constructor');

  // this = {}
  this.orgId = orgId;
  this.orgName = orgName;

  // return this
}

const o1 = new Organisation('ORG001', 'Constantinople tech pvt ltd');
// assigns the newly created object reference to o1

console.log(o1); // organisation

// ------------------------------------------------------------------------- indirect invokation

function greet(arg1, arg2) {
  console.log(arg1.concat(' ', this.firstName,' ', this.lastName, ', ', arg2));
}

function greet(greeting, message) {
  console.log(greeting.concat(' ', this.firstName, ' ', message));
}

const person = {firstName: 'John', lastName: 'Doe'}
greet.apply(person, ['Hey', 'How are you', 'ok'])


const john = {firstName: 'John', lastName: 'Constantine'};

greet.call(john, 'Hey', 'what is up')

// ------------------------------------------------------------------------- arrow function - (this) is always resolved lexically

The arrow function doesn't define its own execution context but resolves to the one from the outer function.

No matter how or where being executed, this value inside of an arrow function always equals this value from the outer function. In other words, the arrow function resolves this lexically.

Contrary to a regular function, the indirect invocation of an arrow function using myArrowFunc.call(thisVal) or myArrowFunc.apply(thisVal) doesn't change the value of this: the context value always resolves lexically.

If you try to invoke an arrow function prefixed with new keyword, JavaScript throws an error meaning that an arrow function cannot be a constructor.

Again (same as with this value), the arguments object is resolved lexically: the arrow function accesses arguments from the outer function.

const organisation = {

  orgId: 4938,
  orgName: 'abc tech pvt ltd',

  getOrgName() {
    console.log(this); // organisation
    const uppercase = () => console.log(this) // organisation
  },

  getOrgId: () => console.log(this)// window
}

organisation.getOrgName();


// ---------------------------------------

// In class syntax, regular function and arrow functions both have this pointed to current instance

class Organisation {
  constructor(orgId, orgName) {
    this.orgId = orgId;
    this.orgName = orgName;
  }

  getOrgInfo() {
    return this; // organisation
  }

  getOrgId = () => this // organisation
}

const o1 = new Organisation(123, 'ABC Pvt ltd');
console.log(o1.getOrgId())

